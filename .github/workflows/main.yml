name: Build, Push, and Delete Old Docker Images

on:
  push:
    branches:
      - main

jobs:
  build_push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14' # Choose the appropriate Node.js version

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: nagagogulan
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      id: build_and_push
      uses: docker/build-push-action@v4
      with:
        context: .github/workflows
        push: true
        tags: nagagogulan/node1:7

  delete_old_images:
    needs: build_push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker
      uses: actions/setup-docker@v2.6.2

    - name: Login to Docker Hub
      run: docker login -u nagagogulan -p ${{ secrets.DOCKER_PASSWORD }}

    - name: Fetch and delete old images
      run: |
        IMAGES=$(curl -s "https://hub.docker.com/v2/repositories/nagagogulan/node1/tags/?page_size=100" | jq -r '.results|.[]|.name')
        LATEST=$(echo "$IMAGES" | sort -V | tail -n 1)
        
        for IMAGE in $IMAGES; do
          if [ "$IMAGE" != "$LATEST" ]; then
            echo "Deleting $IMAGE"
            docker rmi nagagogulan/node1:$IMAGE
          fi
        done

  delete_images:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker
      uses: actions/setup-docker@v2

    - name: Login to Docker Hub
      run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Fetch and delete old images
      run: |
        IMAGES=$(curl -s "https://hub.docker.com/v2/repositories/your_username/your_repo/tags/?page_size=100" | jq -r '.results|.[]|.name')
        LATEST=$(echo "$IMAGES" | sort -V | tail -n 1)
        
        for IMAGE in $IMAGES; do
          if [ "$IMAGE" != "$LATEST" ]; then
            echo "Deleting $IMAGE"
            docker rmi your_username/your_repo:$IMAGE
          fi
        done
