name: Build, Push, and Delete Old Docker Images

on:
  push:
    branches:
      - main

jobs:
  build_push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: nagagogulan
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image with a unique version tag
      id: docker_build
      uses: docker/build-push-action@v4
      with:
        context: .github/workflows
        push: true
        tags: |
          nagagogulan/node1:v${{ github.run_number }}

    - name: Set Docker image version as an environment variable
      run: echo "DOCKER_IMAGE_VERSION=v${{ github.run_number }}" >> $GITHUB_ENV

   
  delete_old_images:
    needs: build_push
    runs-on: ubuntu-latest

    steps:
    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      run: docker login -u nagagogulan -p ${{ secrets.DOCKER_PASSWORD }}

    - name: Fetch and delete old images
      run: |
        REPO="nagagogulan/node1"
        IMAGES=$(curl -s "https://hub.docker.com/v2/repositories/${REPO}/tags/?page_size=100" | jq -r '.results|.[]|.name')

        echo "Found images: $IMAGES"

        if [ -z "$IMAGES" ]; then
          echo "No images found in the repository."
        else
          # Sort images by version and keep only the last two
          LATEST=$(echo "$IMAGES" | grep -E 'v[0-9]+' | sort -t 'v' -k 2 -n | tail -n 2)

          for IMAGE in $IMAGES; do
            if [ "$IMAGE" != "latest" ] && ! echo "$LATEST" | grep -q "$IMAGE"; then
              echo "Deleting $REPO:$IMAGE"
              docker rmi $REPO:$IMAGE || echo "Error deleting $REPO:$IMAGE"
            fi
          done
        fi

    - name: Debug Docker images
      run: |
        docker images
